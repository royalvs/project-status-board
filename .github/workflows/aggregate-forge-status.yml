name: Aggregate Forge Status

on:
  workflow_dispatch:
  schedule:
    - cron: '0 */4 * * *'
  repository_dispatch:
    types: [update-status]

jobs:
  aggregate-status:
    runs-on: ubuntu-latest
    
    permissions:
      contents: write
    
    steps:
      - name: Checkout status board repo
        uses: actions/checkout@v3
        
      - name: Aggregate Status from Both Forges
        uses: actions/github-script@v7
        env:
          MAPCO_OWNER: 'royalvs'
          MAPCO_REPO: 'MAPCO-Programs'
          MTI_OWNER: 'royalvs'
          MTI_REPO: 'MTI-Programs'
        with:
          github-token: ${{ secrets.FORGE_ACCESS_TOKEN }}
          script: |
            const fs = require('fs');
            
            console.log('Initiating forge status aggregation');
            
            console.log('Querying MAPCO forge systems');
            let mapcoIssues = [];
            try {
              const responseMapco = await github.rest.issues.listForRepo({
                owner: process.env.MAPCO_OWNER,
                repo: process.env.MAPCO_REPO,
                state: 'all',
                labels: 'status-board',
                per_page: 100
              });
              mapcoIssues = responseMapco.data;
              console.log('MAPCO: ' + mapcoIssues.length + ' items retrieved');
            } catch (error) {
              console.error('MAPCO forge access error: ' + error.message);
            }
            
            console.log('Querying MTI forge systems');
            let mtiIssues = [];
            try {
              const responseMti = await github.rest.issues.listForRepo({
                owner: process.env.MTI_OWNER,
                repo: process.env.MTI_REPO,
                state: 'all',
                labels: 'status-board',
                per_page: 100
              });
              mtiIssues = responseMti.data;
              console.log('MTI: ' + mtiIssues.length + ' items retrieved');
            } catch (error) {
              console.error('MTI forge access error: ' + error.message);
            }
            
            const mapcoData = mapcoIssues.map(issue => {
              const priorityLabel = issue.labels.find(l => 
                ['alpha', 'beta', 'gamma', 'delta'].includes(l.name.toLowerCase())
              );
              
              return {
                title: issue.title,
                status: issue.state,
                labels: issue.labels
                  .map(l => l.name)
                  .filter(l => l !== 'status-board'),
                priority: priorityLabel ? priorityLabel.name.toLowerCase() : 'gamma',
                updated: issue.updated_at,
                created: issue.created_at,
                closed_at: issue.closed_at,
                number: issue.number,
                body: issue.body || 'No description provided',
                url: issue.html_url,
                assignees: issue.assignees.map(a => a.login),
                milestone: issue.milestone ? issue.milestone.title : null
              };
            });
            
            const mtiData = mtiIssues.map(issue => {
              const priorityLabel = issue.labels.find(l => 
                ['alpha', 'beta', 'gamma', 'delta'].includes(l.name.toLowerCase())
              );
              
              return {
                title: issue.title,
                status: issue.state,
                labels: issue.labels
                  .map(l => l.name)
                  .filter(l => l !== 'status-board'),
                priority: priorityLabel ? priorityLabel.name.toLowerCase() : 'gamma',
                updated: issue.updated_at,
                created: issue.created_at,
                closed_at: issue.closed_at,
                number: issue.number,
                body: issue.body || 'No description provided',
                url: issue.html_url,
                assignees: issue.assignees.map(a => a.login),
                milestone: issue.milestone ? issue.milestone.title : null
              };
            });
            
            const data = {
              mapco: mapcoData,
              mti: mtiData,
              lastUpdate: new Date().toISOString(),
              generatedBy: 'Servo-Skull Scriptum-Vigil-Gamma-7'
            };
            
            fs.writeFileSync('data.json', JSON.stringify(data, null, 2));
            console.log('Data aggregation complete - wrote data.json with ' + (mapcoData.length + mtiData.length) + ' total items');
            
            console.log('Generating status board interface');
            
            const htmlContent = fs.readFileSync('.github/workflows/status-template.html', 'utf8');
            fs.writeFileSync('index.html', htmlContent);
            console.log('Status board interface generated successfully');
            console.log('Aggregation ritual complete');
            
      - name: Commit and push changes
        run: |
          git config user.name "Servo-Skull Scriptum-Vigil-Gamma-7"
          git config user.email "scriptum@forge.mechanicus"
          git add data.json index.html
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "Forge status update - $(date '+%Y-%m-%d %H:%M UTC')"
            git push
            echo "Changes pushed successfully"
          fi