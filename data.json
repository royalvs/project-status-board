{
  "mapco": [
    {
      "title": "New SQT Tool (CRAFT)",
      "status": "open",
      "labels": [
        "alpha"
      ],
      "priority": "alpha",
      "updated": "2025-10-30T18:12:23Z",
      "created": "2025-10-16T15:21:20Z",
      "closed_at": null,
      "number": 2,
      "body": "## Overview\n\n**CRAFT** (Custom Request And Fabrication Tracker) is a modern WPF desktop application for tracking custom fabrication jobs through a multi-department workflow at MAPCO. Built with .NET 8.0 and MVVM architecture, it integrates with Syspro ERP databases to provide real-time job tracking, department routing, and status management.\n\n## Purpose\n\nReplace manual tracking processes for custom fabrication jobs with a centralized system that:\n- Tracks jobs from quote to shipment across SALES, PC (Production Control), and ENGINEERING departments\n- Authenticates users via Windows credentials and maps them to departments based on Syspro GroupCodes\n- Provides audit trails and timeline tracking for all job activities\n- Manages drawing templates and technical documentation for jobs\n\n## Key Features\n\n### âœ… Completed\n- **Windows Authentication**: Auto-login via domain credentials (Environment.UserName)\n- **Department Mapping**: Automatic department assignment (SALES/PC/ENGINEERING/ADMIN) from Syspro GroupCodes\n- **Database Integration**: Connected to SysproCompanyB (job data) and Sysprodb (employee data)\n- **Employee Caching**: 60-minute cache for performance optimization\n- **MVVM Architecture**: Clean separation of UI and business logic\n\n### ðŸš§ In Progress\n- **Job Workflow Status Transitions**: QUOTE â†’ SOLD â†’ SHIPPED â†’ CANCELED with validation rules\n- **Drawing Templates Feature**: Template library, file upload/download, metadata management\n- **Database Schema Finalization**: Production table/column names and query updates\n- **Department Handoff Workflow**: Approval/rejection flows between departments\n\n### ðŸ“‹ Planned\n- Job filtering and search (by status, department, assignee, dates)\n- Job notes/comments for cross-department collaboration\n- Department-specific dashboard views\n- Basic reporting (metrics, completion times, workload)\n- Timeline tracking with alerts\n\n## Technical Stack\n\n- **Framework**: .NET 8.0-windows\n- **UI**: WPF with XAML\n- **Architecture**: MVVM pattern\n- **Database**: SQL Server (REDWOOD)\n  - Job data: SysproCompanyB (Windows Auth)\n  - Employee data: Sysprodb (SQL Auth)\n- **ORM**: ADO.NET with Dapper\n- **Dependencies**: Microsoft.Data.SqlClient, Microsoft.Data.Sqlite\n\n## Project Structure\n\n```\nCRAFT/\nâ”œâ”€â”€ Models/           # Data models (CustomJob, Employee, etc.)\nâ”œâ”€â”€ ViewModels/       # MVVM view models\nâ”œâ”€â”€ Views/            # XAML UI templates\nâ”œâ”€â”€ Services/         # Business logic (SqlServerService, EmployeeService)\nâ”œâ”€â”€ Helpers/          # Utilities (ObservableObject, RelayCommand)\nâ”œâ”€â”€ Converters/       # XAML value converters\nâ””â”€â”€ Documentation/    # Project docs and guides\n```\n\n## Current Status\n\n**Version**: v0.1 - Proof of Concept  \n**Phase**: Active Development  \n**Deployment**: Development Only (local testing)  \n**Health**: âœ… On Track - No Major Blockers\n\nSee `Documentation/PROJECT_STATUS.md` for detailed status updates.\n\n## Requirements\n\n### Department Workflow\n1. **SALES** creates job (QUOTE status)\n2. **PC** reviews and processes (SOLD status)\n3. **ENGINEERING** designs and approves\n4. Final shipment tracking (SHIPPED status)\n\n### User Roles\n- **SALES**: SLSAP, SLSAPM group codes\n- **PC**: PRDCFG, PRDDAT, PRDMGR, PRDPLN group codes\n- **ENGINEERING**: ENGIN group code\n- **ADMIN**: Full access to all features\n\n### Technical Requirements\n- Windows 10/11 (x64)\n- Network access to REDWOOD SQL Server\n- Windows domain authentication\n- .NET 8.0 runtime (or self-contained deployment)\n\n## Documentation\n\n- `Documentation/README.md` - Setup and onboarding guide\n- `Documentation/PROJECT_STATUS.md` - Current development status\n- `Documentation/CLAUDE.md` - Developer guidance and patterns\n- `TESTING_STRATEGY.md` - Unit testing and TDD approach\n- `INFRASTRUCTURE_SETUP.md` - Testing environment setup\n\n## Weekly Meeting\n\n**Schedule**: Tuesdays at 1:30pm  \n**Purpose**: Review progress, discuss blockers, plan next sprint\n\n## Next Milestones\n\n1. âœ… Complete job workflow status transitions\n2. âœ… Finish drawing templates feature  \n3. âœ… Finalize database schema\n4. âœ… Test all CRUD operations end-to-end\n5. ðŸ“… Internal testing with pilot users\n6. ðŸ“… Full department rollout",
      "url": "https://github.com/royalvs/MAPCO-Programs/issues/2",
      "assignees": [
        "royalvs"
      ],
      "milestone": null
    }
  ],
  "mti": [
    {
      "title": "TrailerQuoteMonitor - DriveWorks to REDWOOD Database Integration",
      "status": "open",
      "labels": [
        "alpha"
      ],
      "priority": "alpha",
      "updated": "2025-10-30T19:08:05Z",
      "created": "2025-10-30T19:01:04Z",
      "closed_at": null,
      "number": 1,
      "body": "## Overview\nWindows Service that monitors BANYAN file server for new trailer quote folders from DriveWorks and automatically uploads quote data to REDWOOD database.\n\n## Current Status\n- Initial implementation complete\n- Service monitors BANYAN DriveWorks Group Content Testing Specifications\n- Processes QuoteInfo CSV files\n- Trailer Options processing - pending data availability\n- Inserts data into MEC_TrailerQuoteMaster and MEC_TrailerQuoteDetails tables\n- Test mode available for manual quote processing\n- CLAUDE.md documentation created\n\n## Project Location\nMTI-Programs/DriveWorksToQuoterUpload\n\n## Technology Stack\n- .NET 9.0 Windows Service\n- CsvHelper for CSV processing\n- SQL Server (REDWOOD/SysproCompanyT test database)\n- FileSystemWatcher for real-time monitoring\n\n## Key Features\n- Automatic folder monitoring with pattern matching\n- Atomic database transactions\n- SqlBulkCopy for efficient detail record insertion\n- Test mode for manual quote processing\n- Comprehensive logging (Event Log + file logs)\n\n## Related Projects\nThis is part 1 of the Pipedrive Integration project. A second program for the other direction of integration is planned.\n\n## Next Steps\n- Wait for Trailer Options data to be filled out\n- Complete Trailer Options processing implementation\n- Test with real quote data from DriveWorks\n- Deploy to production server\n- Configure as Windows Service",
      "url": "https://github.com/royalvs/MTI-Programs/issues/1",
      "assignees": [
        "royalvs"
      ],
      "milestone": null
    }
  ],
  "lastUpdate": "2025-10-31T12:30:49.074Z",
  "generatedBy": "Servo-Skull Scriptum-Vigil-Gamma-7"
}